// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: high_score.proto

#include "high_score.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR HighScore::HighScore(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pa_)*/0
  , /*decltype(_impl_.pb_)*/0
  , /*decltype(_impl_.pc_)*/0
  , /*decltype(_impl_.pd_)*/0
  , /*decltype(_impl_.pe_)*/0
  , /*decltype(_impl_.pf_)*/0
  , /*decltype(_impl_.pg_)*/0
  , /*decltype(_impl_.ph_)*/0} {}
struct HighScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HighScoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HighScoreDefaultTypeInternal() {}
  union {
    HighScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HighScoreDefaultTypeInternal _HighScore_default_instance_;
static ::_pb::Metadata file_level_metadata_high_5fscore_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_high_5fscore_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_high_5fscore_2eproto = nullptr;

const uint32_t TableStruct_high_5fscore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HighScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_.pa_),
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_.pb_),
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_.pc_),
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_.pd_),
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_.pe_),
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_.pf_),
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_.pg_),
  PROTOBUF_FIELD_OFFSET(::HighScore, _impl_.ph_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::HighScore)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_HighScore_default_instance_._instance,
};

const char descriptor_table_protodef_high_5fscore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020high_score.proto\"k\n\tHighScore\022\n\n\002pA\030\001 "
  "\001(\005\022\n\n\002pB\030\002 \001(\005\022\n\n\002pC\030\003 \001(\005\022\n\n\002pD\030\004 \001(\005\022"
  "\n\n\002pE\030\005 \001(\005\022\n\n\002pF\030\006 \001(\005\022\n\n\002pG\030\007 \001(\005\022\n\n\002p"
  "H\030\010 \001(\005"
  ;
static ::_pbi::once_flag descriptor_table_high_5fscore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_high_5fscore_2eproto = {
    false, false, 127, descriptor_table_protodef_high_5fscore_2eproto,
    "high_score.proto",
    &descriptor_table_high_5fscore_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_high_5fscore_2eproto::offsets,
    file_level_metadata_high_5fscore_2eproto, file_level_enum_descriptors_high_5fscore_2eproto,
    file_level_service_descriptors_high_5fscore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_high_5fscore_2eproto_getter() {
  return &descriptor_table_high_5fscore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_high_5fscore_2eproto(&descriptor_table_high_5fscore_2eproto);

// ===================================================================

class HighScore::_Internal {
 public:
  using HasBits = decltype(std::declval<HighScore>()._impl_._has_bits_);
  static void set_has_pa(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pe(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ph(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

HighScore::HighScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HighScore)
}
HighScore::HighScore(const HighScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HighScore* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pa_){}
    , decltype(_impl_.pb_){}
    , decltype(_impl_.pc_){}
    , decltype(_impl_.pd_){}
    , decltype(_impl_.pe_){}
    , decltype(_impl_.pf_){}
    , decltype(_impl_.pg_){}
    , decltype(_impl_.ph_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pa_, &from._impl_.pa_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ph_) -
    reinterpret_cast<char*>(&_impl_.pa_)) + sizeof(_impl_.ph_));
  // @@protoc_insertion_point(copy_constructor:HighScore)
}

inline void HighScore::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pa_){0}
    , decltype(_impl_.pb_){0}
    , decltype(_impl_.pc_){0}
    , decltype(_impl_.pd_){0}
    , decltype(_impl_.pe_){0}
    , decltype(_impl_.pf_){0}
    , decltype(_impl_.pg_){0}
    , decltype(_impl_.ph_){0}
  };
}

HighScore::~HighScore() {
  // @@protoc_insertion_point(destructor:HighScore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HighScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HighScore::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HighScore::Clear() {
// @@protoc_insertion_point(message_clear_start:HighScore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.pa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ph_) -
        reinterpret_cast<char*>(&_impl_.pa_)) + sizeof(_impl_.ph_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HighScore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pA = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pa(&has_bits);
          _impl_.pa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pB = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pb(&has_bits);
          _impl_.pb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pc(&has_bits);
          _impl_.pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pD = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pd(&has_bits);
          _impl_.pd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pE = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_pe(&has_bits);
          _impl_.pe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pF = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pf(&has_bits);
          _impl_.pf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pG = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_pg(&has_bits);
          _impl_.pg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pH = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_ph(&has_bits);
          _impl_.ph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HighScore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HighScore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pA = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pa(), target);
  }

  // optional int32 pB = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pb(), target);
  }

  // optional int32 pC = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pc(), target);
  }

  // optional int32 pD = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_pd(), target);
  }

  // optional int32 pE = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_pe(), target);
  }

  // optional int32 pF = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_pf(), target);
  }

  // optional int32 pG = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_pg(), target);
  }

  // optional int32 pH = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_ph(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HighScore)
  return target;
}

size_t HighScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HighScore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 pA = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pa());
    }

    // optional int32 pB = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pb());
    }

    // optional int32 pC = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pc());
    }

    // optional int32 pD = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pd());
    }

    // optional int32 pE = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pe());
    }

    // optional int32 pF = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pf());
    }

    // optional int32 pG = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pg());
    }

    // optional int32 pH = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ph());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HighScore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HighScore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HighScore::GetClassData() const { return &_class_data_; }


void HighScore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HighScore*>(&to_msg);
  auto& from = static_cast<const HighScore&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HighScore)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pa_ = from._impl_.pa_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pb_ = from._impl_.pb_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pc_ = from._impl_.pc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pd_ = from._impl_.pd_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pe_ = from._impl_.pe_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pf_ = from._impl_.pf_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pg_ = from._impl_.pg_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ph_ = from._impl_.ph_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HighScore::CopyFrom(const HighScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HighScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighScore::IsInitialized() const {
  return true;
}

void HighScore::InternalSwap(HighScore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HighScore, _impl_.ph_)
      + sizeof(HighScore::_impl_.ph_)
      - PROTOBUF_FIELD_OFFSET(HighScore, _impl_.pa_)>(
          reinterpret_cast<char*>(&_impl_.pa_),
          reinterpret_cast<char*>(&other->_impl_.pa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HighScore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_high_5fscore_2eproto_getter, &descriptor_table_high_5fscore_2eproto_once,
      file_level_metadata_high_5fscore_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HighScore*
Arena::CreateMaybeMessage< ::HighScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HighScore >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
